<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Curiosity &amp; the Geek Blog</title>
    <link>/tags/gradle/index.xml</link>
    <description>Recent content on Curiosity &amp; the Geek Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="/tags/gradle/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Hooking into Android Studio&#39;s Gradle build process</title>
      <link>/blog/hooking-into-android-gradle-build/</link>
      <pubDate>Sun, 21 Feb 2016 01:29:00 +0530</pubDate>
      
      <guid>/blog/hooking-into-android-gradle-build/</guid>
      <description>

&lt;h2 id=&#34;background&#34;&gt;Background&lt;/h2&gt;

&lt;p&gt;If you want to automate steps to re-build data-files or assets for an Android app every time
the app gets built in Android Studio, you need to hook into the Gradle based build process.
While Gradle itself has &lt;a href=&#34;https://docs.gradle.org/current/userguide/userguide.html&#34;&gt;impressive documentation&lt;/a&gt;,
it was not very clear initially how to hook into an Android app&amp;rsquo;s build process. This article shows how I
managed to make it work.&lt;/p&gt;

&lt;h2 id=&#34;issue&#34;&gt;Issue&lt;/h2&gt;

&lt;p&gt;I want to make an Android app which uses a &lt;a href=&#34;https://developer.android.com/guide/webapps/webview.html&#34;&gt;WebView&lt;/a&gt;
to display a webapp built on &lt;a href=&#34;https://facebook.github.io/react/&#34;&gt;React Framework&lt;/a&gt;. &lt;a href=&#34;https://github.com/facebookincubator/create-react-app&#34;&gt;Create React App&lt;/a&gt;
is a simple way to bootstrap a react app using &lt;a href=&#34;https://webpack.github.io/&#34;&gt;WebPack&lt;/a&gt; and
&lt;a href=&#34;https://babeljs.io/&#34;&gt;BabelJS&lt;/a&gt; to translate JSX to plain JS and bundle the code. The
Create React App scripts provides a simple live-rebuild and webserver feature for local development
and makes an &lt;code&gt;npm run build&lt;/code&gt; command available to generate an optimized build.&lt;/p&gt;

&lt;p&gt;Rather than host this webapp on a server, I would like to make it available locally under the &lt;code&gt;assets&lt;/code&gt;
folder in the Android app to minimize latency. I would also like the webapp automatically rebuilt
everytime I compile the android app and refreshed in the &lt;code&gt;assets&lt;/code&gt; folder.&lt;/p&gt;

&lt;h2 id=&#34;solution&#34;&gt;Solution&lt;/h2&gt;

&lt;p&gt;The &lt;a href=&#34;http://tools.android.com/tech-docs/new-build-system/user-guide#TOC-Android-tasks&#34;&gt;Android Gradle Plugin&lt;/a&gt;
unfortunately uses fancy features of the Gradle DSL to build a task based on build target configurations
at runtime making it difficult to hook onto one of the &lt;code&gt;:assemble&lt;/code&gt; or &lt;code&gt;:build&lt;/code&gt; tasks while compiling.&lt;/p&gt;

&lt;p&gt;However, one of the early tasks that runs during Android App compilation with Gradle is
called &lt;code&gt;:preBuild&lt;/code&gt; and allows us to reliably hook into it for running or own asset generation
routines.&lt;/p&gt;

&lt;p&gt;To do this, I appended the following at the bottom of &lt;code&gt;build.gradle&lt;/code&gt; of the android application.
I first create a Gradle &lt;a href=&#34;https://docs.gradle.org/current/dsl/org.gradle.api.tasks.Exec.html&#34;&gt;Exec&lt;/a&gt;
task which runs the &lt;code&gt;npm run build&lt;/code&gt; command in the directory containing the webapp sources. I then
create a Gradle &lt;a href=&#34;https://docs.gradle.org/current/dsl/org.gradle.api.tasks.Sync.html&#34;&gt;Sync&lt;/a&gt; that copies
the generated webapp files to the &lt;code&gt;assets&lt;/code&gt; folder. The &lt;code&gt;Sync&lt;/code&gt; task depends on the &lt;code&gt;Exec&lt;/code&gt; task. Finally
I make the Android build&amp;rsquo;s &lt;code&gt;:preBuild&lt;/code&gt; task depend on our &lt;code&gt;Sync&lt;/code&gt; task so that the assets are build
and copied before the Android app is compiled.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;task buildWebApp(type:Exec) {
    workingDir &#39;../../webapp&#39;
    //on linux
    commandLine &#39;npm&#39;, &#39;run&#39;, &#39;build&#39;
}

task syncWebApp(type: Sync, dependsOn:&#39;buildWebApp&#39;) {
    from &#39;../../webapp/build&#39;
    into &#39;src/main/assets/build&#39;
    println &#39;in syncWebApp&#39;
}

preBuild.dependsOn(syncWebApp)
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>