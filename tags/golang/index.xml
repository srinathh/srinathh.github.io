<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Golang on Srinath&#39;s Blog </title>
      <generator uri="https://hugo.spf13.com">Hugo</generator>
    <link>http://localhost:1313/tags/golang/index.xml</link>
    <language>en-us</language>
    
    
    <updated>Sat, 30 Aug 2014 05:31:44 UTC</updated>
    
    <item>
      <title>GoAniGiffy - a simple &amp; versatile animated GIF creator</title>
      <link>http://localhost:1313/opensource/goanigiffy</link>
      <pubDate>Sat, 30 Aug 2014 05:31:44 UTC</pubDate>
      
      <guid>http://localhost:1313/opensource/goanigiffy</guid>
      <description>

&lt;p&gt;Animated GIFs have emerged as very convenient ways to post very short movie clips on the web without needing
any complexities like Flash &amp;amp; are well supported by older browsers as well. A number of free services to convert
videos to animated GIFs have sprung up on the web but rarely do they allow editing the video itself.&lt;/p&gt;

&lt;p&gt;GoAniGiffy was born out of the need to convert the demo video of &lt;a href=&#34;/opensource/ardgrafix6100/&#34;&gt;ArdGrafix6100&lt;/a&gt; into
an animated GIF for hosting on GitHub Pages. The video was originally shot with a phone camera and needed some
cropping, scaling &amp;amp; rotation to maximize the impact &amp;amp; minimize GIF filesize&lt;/p&gt;

&lt;h2 id=&#34;toc_0&#34;&gt;GoAniGiffy&lt;/h2&gt;

&lt;p&gt;GoAniGiffy is a small utility written in &lt;a href=&#34;www.golang.org&#34;&gt;Go language&lt;/a&gt; that converts a set of alphabetically sorted
images (eg. frames extracted from a video with mplayer or VLC) into an animated GIF with the options to
&lt;strong&gt;crop, scale, rotate &amp;amp; flip&lt;/strong&gt; the source images. It uses the high quality dithering available in the go language
standard library &amp;amp; in &lt;a href=&#34;www.github.com/disintegration/imaging&#34;&gt;imaging library by Grigory Dryapak&lt;/a&gt; libraries to generate
a high quality gif image.&lt;/p&gt;

&lt;h2 id=&#34;toc_1&#34;&gt;Get It&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/srinathh/goanigiffy/tree/master/binaries&#34;&gt;Zipped binaries&lt;/a&gt; for Linux &amp;amp; Windows in both 32 bit &amp;amp; 64 bit versions are available&lt;/p&gt;

&lt;p&gt;If you want to build the Utility from source, make sure you have installed the Go language i
&lt;a href=&#34;http://golang.org/doc/installa&#34;&gt;installed&lt;/a&gt;installed &amp;amp; :wq
to build GoAniGiffy&lt;/p&gt;

&lt;h2 id=&#34;toc_2&#34;&gt;Installation&lt;/h2&gt;

&lt;p&gt;You should be able to use go get to install GoAniGiffy. This will get the source and create a
binary built in your $GOPATH/bin folder
&lt;code&gt;
go get github.com
&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;toc_3&#34;&gt;Usage&lt;/h2&gt;

&lt;p&gt;GoAniGiffy performs image operations in the order of cropping, scaling, rotating &amp;amp; flipping before
converting the images into an Animated GIF. Image manipulation is done using &lt;a href=&#34;www.github.com/disintegration/imaging&#34;&gt;Grigory Dryapak&amp;rsquo;s imaging&lt;/a&gt;
package. We use the Lanczos filter in Resizing and the default Floyd-Steinberg dithering provided by
Go Language&amp;rsquo;s &lt;a href=&#34;http://golang.org/pkg/image/gif/&#34;&gt;image/gif&lt;/a&gt; package to ensure video quality.
Arbitrary angle rotations are not supported.&lt;/p&gt;

&lt;p&gt;The -delay parameter must be an integer specifying delay between frames in hundredths of a second.
A value of 3 would give approximately 33 fps theoritically
&lt;code&gt;
Usage of goanigiffy:
  -cropheight=-1: height of cropped image, -1 specified full height
  -cropleft=0: left co-ordinate for crop to start
  -croptop=0: top co-ordinate for crop to start
  -cropwidth=-1: width of cropped image, -1 specifies full width
  -delay=3: delay time between frame in hundredths of a second
  -dest=&amp;quot;movie.gif&amp;quot;: a destination filename for the animated gif
  -flip=&amp;quot;none&amp;quot;: valid falues are none, horizontal, vertical
  -rotate=0: valid values are 0, 90, 180, 270
  -scale=1: scaling factor to apply if any
  -src=&amp;quot;*.jpg&amp;quot;: a glob pattern for source images. defaults to *.jpg
  -verbose=false: show in-process messages
&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;toc_4&#34;&gt;Example&lt;/h2&gt;

&lt;p&gt;Here is the command line that builds movie.gif from the images in the sample folder.
&lt;code&gt;
goanigiffy -src=&amp;quot;sample/*.jpg&amp;quot; -dest=&amp;quot;sample/movie.gif&amp;quot; -cropleft=100 -croptop=280 -cropwidth=550 -cropheight=351 -scale=0.5 -rotate=270 -verbose
&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;toc_5&#34;&gt;Tips&lt;/h2&gt;

&lt;p&gt;Here is an example of how you can extract frames from a video clip using mplayer. We are extracting
JPEGs with quality of 80, starting from the 6th second &amp;amp; ending in the 8th second
&lt;code&gt;
mplayer -vo jpeg:quality=80 -nosound -ss 6 -endpos 8 vid.mp4
&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;toc_6&#34;&gt;License&lt;/h2&gt;

&lt;p&gt;GoAniGiffy code is licensed under the &lt;a href=&#34;https://github.com/srinathh/goanigiffy/blob/master/LICENSE&#34;&gt;Apache v2.0&lt;/a&gt; license.&lt;/p&gt;

&lt;p&gt;All other media files &amp;amp; documentation in the repository is licened under &lt;a rel=&#34;license&#34; href=&#34;http://creativecommons.org/licenses/by-sa/4.0/&#34;&gt;Creative Commons Attribution-ShareAlike 4.0 International License&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hello World Web Servers in Python &amp; Go</title>
      <link>http://localhost:1313/blog/simplehttpservers</link>
      <pubDate>Sat, 23 Aug 2014 05:59:29 UTC</pubDate>
      
      <guid>http://localhost:1313/blog/simplehttpservers</guid>
      <description>

&lt;p&gt;Hello World programs are the first programs typically introduced in any
programming language tutorial. However, in our modern era of web applications
they&amp;rsquo;re not particularly insightful into the strenghts of a language to support
web development. In this article, we compare Hello World web servers written in
Python &amp;amp; Go languages.&lt;/p&gt;

&lt;h2 id=&#34;toc_0&#34;&gt;Go Language&lt;/h2&gt;

&lt;p&gt;The &lt;a href=&#34;http://golang.org/&#34;&gt;Go Language&lt;/a&gt; released by Google is notable for its terse C Language inspired
syntax (indeed &lt;a href=&#34;http://en.wikipedia.org/wiki/Ken_Thompson is one of the inventors&#34;&gt;Ken Thompson&lt;/a&gt;
that nevertheless removes a lot of boilerplate. It has a unique approach to concurrency
and derives high performance from being a compiled language.&lt;/p&gt;

&lt;p&gt;Go comes with extensive support for developing web applications within its
standard library including a robust templating solution. For serving simple static
or dynamic driven websites, onerarely need anything more than this.
For fancier applications, third party libraries provide more complex routers,
context packages etc. The &lt;a href=&#34;/code/helloworld.go&#34;&gt;Hello World&lt;/a&gt; web server is
effectively just 3 lines of code and can support many concurrent connections.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (
    &amp;quot;fmt&amp;quot;
    &amp;quot;log&amp;quot;
    &amp;quot;net/http&amp;quot;
)

func main() {
    http.HandleFunc(&amp;quot;/&amp;quot;, func(w http.ResponseWriter, r *http.Request) {
        fmt.Fprintf(w, &amp;quot;Hello World&amp;quot;)
    })
    log.Fatal(http.ListenAndServe(&amp;quot;:8080&amp;quot;, nil))
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;toc_1&#34;&gt;Python&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://www.python.org/&#34;&gt;Python&lt;/a&gt; is among the simplest of modern programming languages to learn due to its guiding
philosophy of &lt;a href=&#34;http://legacy.python.org/dev/peps/pep-0020/&#34;&gt;&lt;em&gt;There should be one and preferably only one obvious way to do it&lt;/em&gt;&lt;/a&gt;.
Python&amp;rsquo;s ease and a large base of mature third party libraries has made it a language
of choice among startups looking to iterate their minimum viable product quickly accepting
the performance penalty of an interpreted language.&lt;/p&gt;

&lt;p&gt;Python&amp;rsquo;s standard library has been designed for a prior era and it is definitely
not as simple to spin up a &lt;a href=&#34;/code/helloworld.py&#34;&gt;Hello World&lt;/a&gt; webserver as in Go.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import BaseHTTPServer

HOST_NAME = &#39;localhost&#39;
PORT_NUMBER = 8080

class MyHandler(BaseHTTPServer.BaseHTTPRequestHandler):
    def do_GET(s):
        s.send_response(200)
        s.send_header(&amp;quot;Content-type&amp;quot;, &amp;quot;text/text&amp;quot;)
        s.end_headers()
        s.wfile.write(&amp;quot;Hello World&amp;quot;)

if __name__ == &#39;__main__&#39;:
    server_class = BaseHTTPServer.HTTPServer
    httpd = server_class((HOST_NAME, PORT_NUMBER), MyHandler)
    try:
        httpd.serve_forever()
    except KeyboardInterrupt:
        pass
    httpd.server_close()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;However modern web development with Python typically relies on one of the
many third party web frameworks, notably &lt;a href=&#34;https://www.djangoproject.com/&#34;&gt;Django&lt;/a&gt;, to speed up web development.
As an example, look at the simplification coming from the popular &lt;a href=&#34;http://flask.pocoo.org/&#34;&gt;Flask&lt;/a&gt; micro-framework.
However, Python&amp;rsquo;s lack of in-built support for easy concurrency means that often,
jury-rigged solutions need to be employed in production to scale&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;from flask import Flask
app = Flask(__name__)

@app.route(&amp;quot;/&amp;quot;)
def hello():
    return &amp;quot;Hello World!&amp;quot;

if __name__ == &amp;quot;__main__&amp;quot;:
    app.run()
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>