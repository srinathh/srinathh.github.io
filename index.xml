<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Recent Content on Srinath&#39;s Blog </title>
      <generator uri="https://hugo.spf13.com">Hugo</generator>
    <link>http://localhost:1313/index.xml</link>
    <language>en-us</language>
    
    
    <updated>Sat, 30 Aug 2014 05:31:44 UTC</updated>
    
    <item>
      <title>GoAniGiffy - a simple &amp; versatile animated GIF creator</title>
      <link>http://localhost:1313/opensource/goanigiffy</link>
      <pubDate>Sat, 30 Aug 2014 05:31:44 UTC</pubDate>
      
      <guid>http://localhost:1313/opensource/goanigiffy</guid>
      <description>

&lt;p&gt;Animated GIFs have emerged as very convenient ways to post very short movie clips on the web without needing
any complexities like Flash &amp;amp; are well supported by older browsers as well. A number of free services to convert
videos to animated GIFs have sprung up on the web but rarely do they allow editing the video itself.&lt;/p&gt;

&lt;p&gt;GoAniGiffy was born out of the need to convert the demo video of &lt;a href=&#34;/opensource/ardgrafix6100/&#34;&gt;ArdGrafix6100&lt;/a&gt; into
an animated GIF for hosting on GitHub Pages. The video was originally shot with a phone camera and needed some
cropping, scaling &amp;amp; rotation to maximize the impact &amp;amp; minimize GIF filesize&lt;/p&gt;

&lt;h2 id=&#34;toc_0&#34;&gt;GoAniGiffy&lt;/h2&gt;

&lt;p&gt;GoAniGiffy is a small utility written in &lt;a href=&#34;www.golang.org&#34;&gt;Go language&lt;/a&gt; that converts a set of alphabetically sorted
images (eg. frames extracted from a video with mplayer or VLC) into an animated GIF with the options to
&lt;strong&gt;crop, scale, rotate &amp;amp; flip&lt;/strong&gt; the source images. It uses the high quality dithering available in the go language
standard library &amp;amp; in &lt;a href=&#34;www.github.com/disintegration/imaging&#34;&gt;imaging library by Grigory Dryapak&lt;/a&gt; libraries to generate
a high quality gif image.&lt;/p&gt;

&lt;h2 id=&#34;toc_1&#34;&gt;Get It&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/srinathh/goanigiffy/tree/master/binaries&#34;&gt;Zipped binaries&lt;/a&gt; for Linux &amp;amp; Windows in both 32 bit &amp;amp; 64 bit versions are available&lt;/p&gt;

&lt;p&gt;If you want to build the Utility from source, make sure you have installed the Go language i
&lt;a href=&#34;http://golang.org/doc/installa&#34;&gt;installed&lt;/a&gt;installed &amp;amp; :wq
to build GoAniGiffy&lt;/p&gt;

&lt;h2 id=&#34;toc_2&#34;&gt;Installation&lt;/h2&gt;

&lt;p&gt;You should be able to use go get to install GoAniGiffy. This will get the source and create a
binary built in your $GOPATH/bin folder
&lt;code&gt;
go get github.com
&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;toc_3&#34;&gt;Usage&lt;/h2&gt;

&lt;p&gt;GoAniGiffy performs image operations in the order of cropping, scaling, rotating &amp;amp; flipping before
converting the images into an Animated GIF. Image manipulation is done using &lt;a href=&#34;www.github.com/disintegration/imaging&#34;&gt;Grigory Dryapak&amp;rsquo;s imaging&lt;/a&gt;
package. We use the Lanczos filter in Resizing and the default Floyd-Steinberg dithering provided by
Go Language&amp;rsquo;s &lt;a href=&#34;http://golang.org/pkg/image/gif/&#34;&gt;image/gif&lt;/a&gt; package to ensure video quality.
Arbitrary angle rotations are not supported.&lt;/p&gt;

&lt;p&gt;The -delay parameter must be an integer specifying delay between frames in hundredths of a second.
A value of 3 would give approximately 33 fps theoritically
&lt;code&gt;
Usage of goanigiffy:
  -cropheight=-1: height of cropped image, -1 specified full height
  -cropleft=0: left co-ordinate for crop to start
  -croptop=0: top co-ordinate for crop to start
  -cropwidth=-1: width of cropped image, -1 specifies full width
  -delay=3: delay time between frame in hundredths of a second
  -dest=&amp;quot;movie.gif&amp;quot;: a destination filename for the animated gif
  -flip=&amp;quot;none&amp;quot;: valid falues are none, horizontal, vertical
  -rotate=0: valid values are 0, 90, 180, 270
  -scale=1: scaling factor to apply if any
  -src=&amp;quot;*.jpg&amp;quot;: a glob pattern for source images. defaults to *.jpg
  -verbose=false: show in-process messages
&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;toc_4&#34;&gt;Example&lt;/h2&gt;

&lt;p&gt;Here is the command line that builds movie.gif from the images in the sample folder.
&lt;code&gt;
goanigiffy -src=&amp;quot;sample/*.jpg&amp;quot; -dest=&amp;quot;sample/movie.gif&amp;quot; -cropleft=100 -croptop=280 -cropwidth=550 -cropheight=351 -scale=0.5 -rotate=270 -verbose
&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;toc_5&#34;&gt;Tips&lt;/h2&gt;

&lt;p&gt;Here is an example of how you can extract frames from a video clip using mplayer. We are extracting
JPEGs with quality of 80, starting from the 6th second &amp;amp; ending in the 8th second
&lt;code&gt;
mplayer -vo jpeg:quality=80 -nosound -ss 6 -endpos 8 vid.mp4
&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;toc_6&#34;&gt;License&lt;/h2&gt;

&lt;p&gt;GoAniGiffy code is licensed under the &lt;a href=&#34;https://github.com/srinathh/goanigiffy/blob/master/LICENSE&#34;&gt;Apache v2.0&lt;/a&gt; license.&lt;/p&gt;

&lt;p&gt;All other media files &amp;amp; documentation in the repository is licened under &lt;a rel=&#34;license&#34; href=&#34;http://creativecommons.org/licenses/by-sa/4.0/&#34;&gt;Creative Commons Attribution-ShareAlike 4.0 International License&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>FullScreenWrapper2 - a Python GUI Framework for Scripting Layer for Android (SL4A)</title>
      <link>http://localhost:1313/opensource/fullscreenwrapper</link>
      <pubDate>Sun, 24 Aug 2014 04:24:12 UTC</pubDate>
      
      <guid>http://localhost:1313/opensource/fullscreenwrapper</guid>
      <description>

&lt;p&gt;FullScreenWapper2 is a GUI Framework for developing full screen apps using the FullScreenUI API functions provided by
&lt;a href=&#34;https://code.google.com/p/android-scripting/&#34;&gt;Scripting Layer for Android (SL4A)&lt;/a&gt; using &lt;a href=&#34;Shttps://code.google.com/p/python-for-android/&#34;&gt;Python-for-Android&lt;/a&gt;
It enables Python SL4A scripts to get a look &amp;amp; feel similar to Android Java apps using the same Views used by native
Java apps XML Layouts and provides pythonic access to events.&lt;/p&gt;

&lt;h2 id=&#34;toc_0&#34;&gt;Features&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Managed eventloop &amp;amp; a layout stack enabling easy parent-&amp;gt;child-&amp;gt;parent transitions&lt;/li&gt;
&lt;li&gt;EventHandler classes with event-matching functions pre-built for standard View events like click,itemclick(ListView) and key&lt;/li&gt;
&lt;li&gt;Device Sensors &amp;amp; other similar SL4A/Custom events can also be caught &amp;amp; managed eventloop + EventHandler class&lt;/li&gt;
&lt;li&gt;Pythonic access to the views and properties of the layout (ie. MainLayout.views.txt_label.background = &amp;ldquo;#FFAA00AA&amp;rdquo;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;toc_1&#34;&gt;Get it&lt;/h2&gt;

&lt;p&gt;Full documentation &amp;amp; library download is available at the &lt;a href=&#34;https://code.google.com/p/python-for-android/wiki/fullscreenwrapper2&#34;&gt;Python-for-Android Wiki&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;toc_2&#34;&gt;Framework Overview&lt;/h2&gt;

&lt;p&gt;&lt;img alt=&#34;FullScreenWrapper2 framework design&#34; class=&#34;pure-img-responsive&#34; src=&#34;/img/fullscreenwrapper2.png&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;toc_3&#34;&gt;Screenshots&lt;/h2&gt;

&lt;p&gt;&lt;img alt=&#34;FullScreenWrapper2 framework design&#34; class=&#34;pure-img-responsive&#34; src=&#34;/img/fullscreenwrapper2_demo_screenshots.png&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Fast &amp; Full-featured Arduino driver for Nokia 6100 Color LCDs</title>
      <link>http://localhost:1313/opensource/ardgrafix6100</link>
      <pubDate>Sun, 24 Aug 2014 04:23:21 UTC</pubDate>
      
      <guid>http://localhost:1313/opensource/ardgrafix6100</guid>
      <description>

&lt;p&gt;ArdGrafix6100 is a fast and full-featured graphics library for interfacing the Nokia 6100 color
graphics LCD with Arduino. It uses hardware SPI &amp;amp; block write features of the graphics controller
on the LCD to boost graphics performance &amp;amp; supports advanced features like proportional fonts
in a tiny RAM footprint. The Philips PF8833 controller is currently supported.&lt;/p&gt;

&lt;p&gt;&lt;img alt=&#34;ArdGrafix6100 Screenshot&#34; class=&#34;pure-img-responsive&#34; src=&#34;/img/ardgrafix6100.jpg&#34; /&gt;
&lt;img alt=&#34;ArdGrafix6100 Screenshot&#34; class=&#34;pure-img-responsive&#34; src=&#34;/img/ardgrafix6100demo.gif&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;toc_0&#34;&gt;Download&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://code.google.com/p/ardgrafix6100/&#34;&gt;Get the Library&lt;/a&gt; from Google Code&lt;/p&gt;

&lt;h2 id=&#34;toc_1&#34;&gt;Fast&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Uses ATmega SPI peripherals &amp;amp; ports for high - performance graphics&lt;/li&gt;
&lt;li&gt;Uses block-write features of LCD controller to speed up writes&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;toc_2&#34;&gt;Full Featured&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Supports Proportional Fonts - a 14px height font is included by default!&lt;/li&gt;
&lt;li&gt;Implements all standard graphic primitives &amp;amp; utility classes like &amp;ldquo;xy&amp;rdquo;, &amp;ldquo;rectangle&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;toc_3&#34;&gt;Practical&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Fonts implemented programatically using OOP to conserve SRAM&lt;/li&gt;
&lt;li&gt;Uses only AVR LIBC functions to ensure easy portability beyond Arduino&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;toc_4&#34;&gt;License&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://www.apache.org/licenses/LICENSE-2.0&#34;&gt;Apache License, Version 2.0&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Using FuseCompress to compress folders in Ubuntu</title>
      <link>http://localhost:1313/blog/fusecompress-on-ubuntu</link>
      <pubDate>Sat, 23 Aug 2014 09:06:32 UTC</pubDate>
      
      <guid>http://localhost:1313/blog/fusecompress-on-ubuntu</guid>
      <description>

&lt;h2 id=&#34;toc_0&#34;&gt;Why consider using Fusecompress&lt;/h2&gt;

&lt;p&gt;Many light-weight Notebooks and all Chromebooks today come with balzingly fast but
limited capacity Solid State Drives (SSDs) on the theory that people store much of
their data in the cloud. However, to use these as Android development machines,
you typically do need to store space hogs like sources and library documentation,
emulator images etc locally.&lt;/p&gt;

&lt;p&gt;Fusecompress is a great little legacy utility that uses the FUSE (File System
in User Space) library to provide an on the fly compressed mountable filesystem
that in effect lets you compress specific directories in manner completely
transparent to all other programs.&lt;/p&gt;

&lt;p&gt;I use my HP Chromebook 14 loaded with Ubuntu 14.04 via the ChrUbuntu on a lean
9GB partition as my primary development machine. I use fusecompress to compress
offline documentation for Android and Python and the huge Android Emulator
system images. This reduces the SSD footprint considerably with barely any impact
on load times. The Emulator startup does become significantly slower but I need to
to do this only once each session.&lt;/p&gt;

&lt;h2 id=&#34;toc_1&#34;&gt;Installing fusecompress on Ubuntu 14.04&lt;/h2&gt;

&lt;p&gt;Fusecompress however is not available in the standard Ubuntu repositories and
must be compiled from source. Given the legacy nature of the codebase, it&amp;rsquo;s
a bit tricky to compile for novices. This blog post outlines the process step-by-step.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Install Aptitude&lt;/strong&gt;&lt;br /&gt;
When I was using apt-get to install the dependency library sources, I found in
a couple of cases the latest development releases of the libraries had
conflicts and I had to regress to the previous version to install them.
Aptitude does a much better job of solving for conflicts&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo apt-get install aptitude
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Install the auto build tools&lt;/strong&gt;&lt;br /&gt;
If they&amp;rsquo;re not installed on your system already, you&amp;rsquo;ll need to install
autoconf and automake to be able to build from source.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo aptitude install autoconf automake libtool
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Install compression algorithms development packages&lt;/strong&gt;&lt;br /&gt;
Next install the development packages for compression algorithms supported
by fusecompress - LZO, LZMA, ZLib &amp;amp; BZ2. I ran into trouble in the LZO package
where I had to revert from the 2.06-1.2ubuntu1.1 version to 2.06-1.2ubuntu1
version. Aptitude gives you a series of menu choices to handle this smoothly&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo aptitude install zlib1g-dev libbz2-dev liblzma-dev liblzo2-dev
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Install the FUSE development package&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo aptitude install libfuse-dev
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Download the fusecompress sources&lt;/strong&gt;&lt;br /&gt;
You can checkout the fusecompress source from Google Code with SubVersion.
In today&amp;rsquo;s world of distributed version control systems like Git &amp;amp; Mercurial,
using SubVersion may seem quaint but that&amp;rsquo;s the cost of using a stable legacy
package like FuseCompress.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo aptitude install subversion
svn checkout http://fusecompress.googlecode.com/svn/trunk/ fusecompress-read-only
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Run the fusecompress build process
Change to the folder where you&amp;rsquo;ve downloaded the fusecompress sources and
run the following commands. Put the generated fusecompress binary somewhere
in your system path.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;./autogen.sh
./configure
make
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;toc_2&#34;&gt;Using fusecompress&lt;/h2&gt;

&lt;p&gt;The least disruptive way I found to use fusecompress is to simply mount the compressed
folders exactly where they currently are. The key thing to remember while using
fusecompress is that it compress files when they get written to disk. So files that
are already in the folder won&amp;rsquo;t automatically get compressed. The way I typically
manage this is:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Rename the directory you want to compress&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mv directoryname temporaryname
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Create an empty directory with the old name&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mkdir directoryname
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Fusecompress the directory&lt;/strong&gt;
The default compression algorithm used is LZO which is very fast. You can also
use LZMA as indicated below to get a better compression ratio. You maw want to
add this line to your ~/.profile to automount on boot.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;fusecompress directoryname
fusecompress -c lzma directoryname
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Move back all the contents&lt;/strong&gt;
Since Fusecompress will now compress each of the files as it is moved back, this
step will take quite a bit of time depending on the amount of data&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd temporaryname
mv *.* ../directoryname
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Hello World Web Servers in Python &amp; Go</title>
      <link>http://localhost:1313/blog/simplehttpservers</link>
      <pubDate>Sat, 23 Aug 2014 05:59:29 UTC</pubDate>
      
      <guid>http://localhost:1313/blog/simplehttpservers</guid>
      <description>

&lt;p&gt;Hello World programs are the first programs typically introduced in any
programming language tutorial. However, in our modern era of web applications
they&amp;rsquo;re not particularly insightful into the strenghts of a language to support
web development. In this article, we compare Hello World web servers written in
Python &amp;amp; Go languages.&lt;/p&gt;

&lt;h2 id=&#34;toc_0&#34;&gt;Go Language&lt;/h2&gt;

&lt;p&gt;The &lt;a href=&#34;http://golang.org/&#34;&gt;Go Language&lt;/a&gt; released by Google is notable for its terse C Language inspired
syntax (indeed &lt;a href=&#34;http://en.wikipedia.org/wiki/Ken_Thompson is one of the inventors&#34;&gt;Ken Thompson&lt;/a&gt;
that nevertheless removes a lot of boilerplate. It has a unique approach to concurrency
and derives high performance from being a compiled language.&lt;/p&gt;

&lt;p&gt;Go comes with extensive support for developing web applications within its
standard library including a robust templating solution. For serving simple static
or dynamic driven websites, onerarely need anything more than this.
For fancier applications, third party libraries provide more complex routers,
context packages etc. The &lt;a href=&#34;/code/helloworld.go&#34;&gt;Hello World&lt;/a&gt; web server is
effectively just 3 lines of code and can support many concurrent connections.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (
    &amp;quot;fmt&amp;quot;
    &amp;quot;log&amp;quot;
    &amp;quot;net/http&amp;quot;
)

func main() {
    http.HandleFunc(&amp;quot;/&amp;quot;, func(w http.ResponseWriter, r *http.Request) {
        fmt.Fprintf(w, &amp;quot;Hello World&amp;quot;)
    })
    log.Fatal(http.ListenAndServe(&amp;quot;:8080&amp;quot;, nil))
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;toc_1&#34;&gt;Python&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://www.python.org/&#34;&gt;Python&lt;/a&gt; is among the simplest of modern programming languages to learn due to its guiding
philosophy of &lt;a href=&#34;http://legacy.python.org/dev/peps/pep-0020/&#34;&gt;&lt;em&gt;There should be one and preferably only one obvious way to do it&lt;/em&gt;&lt;/a&gt;.
Python&amp;rsquo;s ease and a large base of mature third party libraries has made it a language
of choice among startups looking to iterate their minimum viable product quickly accepting
the performance penalty of an interpreted language.&lt;/p&gt;

&lt;p&gt;Python&amp;rsquo;s standard library has been designed for a prior era and it is definitely
not as simple to spin up a &lt;a href=&#34;/code/helloworld.py&#34;&gt;Hello World&lt;/a&gt; webserver as in Go.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import BaseHTTPServer

HOST_NAME = &#39;localhost&#39;
PORT_NUMBER = 8080

class MyHandler(BaseHTTPServer.BaseHTTPRequestHandler):
    def do_GET(s):
        s.send_response(200)
        s.send_header(&amp;quot;Content-type&amp;quot;, &amp;quot;text/text&amp;quot;)
        s.end_headers()
        s.wfile.write(&amp;quot;Hello World&amp;quot;)

if __name__ == &#39;__main__&#39;:
    server_class = BaseHTTPServer.HTTPServer
    httpd = server_class((HOST_NAME, PORT_NUMBER), MyHandler)
    try:
        httpd.serve_forever()
    except KeyboardInterrupt:
        pass
    httpd.server_close()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;However modern web development with Python typically relies on one of the
many third party web frameworks, notably &lt;a href=&#34;https://www.djangoproject.com/&#34;&gt;Django&lt;/a&gt;, to speed up web development.
As an example, look at the simplification coming from the popular &lt;a href=&#34;http://flask.pocoo.org/&#34;&gt;Flask&lt;/a&gt; micro-framework.
However, Python&amp;rsquo;s lack of in-built support for easy concurrency means that often,
jury-rigged solutions need to be employed in production to scale&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;from flask import Flask
app = Flask(__name__)

@app.route(&amp;quot;/&amp;quot;)
def hello():
    return &amp;quot;Hello World!&amp;quot;

if __name__ == &amp;quot;__main__&amp;quot;:
    app.run()
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>